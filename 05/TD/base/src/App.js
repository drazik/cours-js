import { fetchForecastForCity } from "./api.js"
import * as React from "react"
import "bootstrap/dist/css/bootstrap.css"
import { Form } from "./Form.js"
import { Spinner } from "./Spinner.js"
import { Forecast } from "./Forecast.js"

export const App = () => {
  // ğŸ‘‰ DÃ©finir un state `status` avec la valeur initiale `"idle"`

  // ğŸ‘‰ DÃ©finir un state `error` avec la valeur initiale `null`

  // ğŸ‘‰ DÃ©finir un state `data` avec la valeur initiale `null`

  const handleSubmit = async (city) => {
    // ğŸ‘‰ Passer le state `status` Ã  `"loading"`

    try {
      // ğŸ‘‰ Lancer l'appel Ã  l'API (fonction `fetchForecastForCity`) et rÃ©cupÃ©rer les donnÃ©es renvoyÃ©es

      // ğŸ‘‰ Mettre les donnÃ©es reÃ§ues dans le state `data`

      // ğŸ‘‰ Passer le state `status` Ã  `"success"`
    } catch (error) {
      // ğŸ‘‰ Mettre le message d'erreur (propriÃ©tÃ© `message` de l'objet `error`) dans le state `error`

      // ğŸ‘‰ Passer le state `status` Ã  `"error"`
    }
  }

  return (
    <div className="d-grid gap-4">
      <Form onSubmit={handleSubmit} />
      {/* ğŸ‘‰ Lorsque le status vaut "loading", afficher le message "Chargement..." */}

      {/* ğŸ‘‰ Lorsque le status vaut "error", afficher le message d'erreur */}

      {/* ğŸ‘‰ Lorsque le status vaut "success", afficher un composant Forecast en lui passant en props la ville et le tableau de prÃ©visions reÃ§us du serveur */}

    </div>
  )
}

export default App
