/**
 * Initialise le formulaire d'ajout d'un Ã©lÃ©ment
 *
 * @param {HTMLFormElement} formElement - le formulaire d'ajout d'un item
 * @param {Function} onSubmit - La fonction Ã  exÃ©cuter lorsque le formulaire est soumit
 */
export function initForm(formElement, onSubmit) {
  let input = formElement.querySelector('input')

  function getInputValue() {
    return input.value.trim()
  }

  // ğŸ‘‰ RÃ©cupÃ©rer l'Ã©lÃ©ment situÃ© dans `formElement` et qui porte la classe
  // `js-form-submit`
  let submitButton = formElement.querySelector('.js-form-submit')

  // ğŸ‘‰ Si la valeur de l'input trimmÃ©e est vide, alors dÃ©sactiver le bouton
  submitButton.disabled = getInputValue() === ''

  function handleSubmit(e) {
    e.preventDefault()


    let trimmedValue = getInputValue()

    if (trimmedValue) {
      onSubmit(trimmedValue)

      input.value = ''
      submitButton.disabled = true
    }
  }

  formElement.addEventListener('submit', handleSubmit)

  // ğŸ‘‰ Ajouter un event listener sur l'input, pour l'Ã©vÃ©nement `keyup`.
  // La fonction associÃ©e doit activer ou dÃ©sactiver le bouton en fonction de la
  // valeur trimmÃ©e de l'input : le dÃ©sactiver si elle est vide, l'activer sinon
  function handleKeyup() {
    submitButton.disabled = getInputValue() === ''
  }

  input.addEventListener('keyup', handleKeyup)
}
